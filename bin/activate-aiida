#!/usr/bin/env bash

# for help
# source script_name -h

if [ $_ == $0 ]; then
    echo "this script must be sourced: source $(basename $0)"
    exit
fi

function boolean() {
  case $1 in
    True) echo true ;;
    False) echo false ;;
    TRUE) echo true ;;
    FALSE) echo false ;;
    true) echo true ;;
    false) echo false ;;
    *) echo "Err: Unknown boolean value \"$1\"" 1>&2; exit 1 ;;
   esac
}

activate_aiida () {
    # echo "hi1"
    local args=$(read-aiida-args "$@")
    if [[ -z $args ]]; then
      # echo -e "${COLORRED}QUITTING PROCESS${COLORNONE}"
      return
    fi
  
    local yaml_file
    local activate_conda
    local create_missing
    local import_nodes
    IFS=',' read -r yaml_file activate_conda create_missing import_nodes <<< "$args"

    activate_conda=$(boolean "$activate_conda")
    create_missing=$(boolean "$create_missing")
    import_nodes=$(boolean "$import_nodes")

    echo "parsed args: -ac $activate_conda -c $create_missing -i $import_nodes $yaml_file"
    
    # NB: if you are using the echo command, be sure to use the -e flag to allow backslash escapes.
    local COLORRED='\033[0;31m'
    local COLORORANGE='\033[0;33m'
    local COLORGREEN='\033[0;32m'
    local COLORNONE='\033[0m' # No Color

    # --------------------------------------------------------------------------
    # READ CONFIG FILE

    echo -e "${COLORGREEN}- Reading variables from ${yaml_file}${COLORNONE}"

    local output1=$(read-aiida-config "${yaml_file}")

    if [[ -z $output1 ]]; then
        echo -e "${COLORRED}QUITTING PROCESS${COLORNONE}"
        return
    fi

    # comma delimited
    local outarray
    IFS=',' read -ra outarray <<< "$output1"
   # --------------------------------------------------------------------------


    # --------------------------------------------------------------------------
    # SETUP CONDA ENVIRONMENT
    local ENV=${outarray[0]}
    if [ ${activate_conda} == true ] ;then
        echo -e "${COLORGREEN}- Activating Conda environment: '$ENV'${COLORNONE}"
        if [[ $PATH == *"conda/envs/$ENV/bin"* ]]; then
            echo -e "  Conda env '$ENV' already activated."
        else
            conda deactivate
            conda activate $ENV
        fi
    fi
    # --------------------------------------------------------------------------

    # --------------------------------------------------------------------------
    # SETUP GITHUB BRANCHES
    local GITBRANCHES=${outarray[14]}
    if [ ! -z "$GITBRANCHES" ] ;then
        echo -e "${COLORGREEN}- Activating Github Branches:${COLORNONE}"
        local gitarray
        IFS='::' read -ra gitarray <<< "$GITBRANCHES"
        for gitcommand in "${gitarray[@]}"; do
            if [ ! -z "$gitcommand" ] ;then
                echo "  $gitcommand"
                eval "$gitcommand" >/dev/null
            fi
        done
    fi
    # --------------------------------------------------------------------------

    # --------------------------------------------------------------------------
    # SETUP SQL SERVER

    echo -e "${COLORGREEN}- Setting Up SQL Database${COLORNONE}"

    local SQLPATH=${outarray[2]}
    local SQLUSER=${outarray[3]}
    local SQLUSERPWRD=${outarray[4]}
    local SQLNAME=${outarray[5]}
    local SQLPORT=${outarray[6]}

    # set database path
    echo -e "  PGDATA='${SQLPATH}'"
    export PGDATA="$SQLPATH"

    # ensure the database system exists
    initdb &>/dev/null

    # activate server
    if [[ -z `pg_ctl -D $SQLPATH status | grep "server is running"` ]]; then
        # close any other active server (from: https://askubuntu.com/questions/547434/how-to-nicely-stop-all-postgres-processes)
        psql -Xtc 'show data_directory' &>/dev/null && pg_ctl -D $(psql -Xtc 'show data_directory') stop &>/dev/null
        pkill postgres
        echo -e "${COLORGREEN}- Activating Postgres server: $SQLPATH on port $SQLPORT${COLORNONE}"
        pg_ctl -D $SQLPATH start -o "-F -p $SQLPORT" -l "$SQLPATH/postgres_env_$ENV.log"
        echo -e "${COLORORANGE}  Logging Postgres server to: $SQLPATH/postgres_env_$ENV.log${COLORNONE}"
    else
        echo -e "  Postgres server already running: $SQLPATH"
    fi

    # ebsure the user db exists (see https://stackoverflow.com/a/17936043/5033292)
    createdb &>/dev/null

    # test if the user already exists
    if [ "$( psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$SQLUSER'" )" = '1' ]
    then
        echo "  User $SQLUSER already exists"
    else
        if [ ${create_missing} == true ] ;then
            echo -e "${COLORORANGE}Creating User $SQLUSER${COLORNONE}"
            createuser $SQLUSER
        else
            echo -e "${COLORRED} User $SQLUSER does not exist (and -c flag not set).$COLORNONE"
            return
        fi
    fi    

    # test if the database already exists
    if [ "$( psql -tAc "SELECT 1 FROM pg_database WHERE datname='$SQLNAME'" )" = '1' ]
    then
        echo "  Database $SQLNAME already exists"
    else
        if [ ${create_missing} == true ] ;then
            echo -e "${COLORORANGE}Creating Database $SQLNAME${COLORNONE}"
            createdb $SQLNAME --owner=$SQLUSER
            psql --dbname=$SQLNAME -c "alter user $SQLUSER with encrypted password '$SQLUSERPWRD';"
            psql --dbname=$SQLNAME -c "grant all privileges on database $SQLNAME to $SQLUSER;"
        else
            echo -e "${COLORRED} Database $SQLNAME does not exist (and -c flag not set).$COLORNONE"
            return
        fi
    fi    
    # --------------------------------------------------------------------------

    # --------------------------------------------------------------------------
    # START RabbitMQ (aiida_core >= v1.0.0)
    echo -e "${COLORGREEN}- Starting RabbitMQ${COLORNONE}"

    # RabbitMQ is a message queue application that allows AiiDA to send messages to the daemon
    # it should start automatically (after system reboot), but just in case
    if hash rabbitmq-server 2>/dev/null; then
        # TODO check if its already running. use `rabbitmqctl status`, but what to grep for?
        echo -e "${COLORGREEN}- Ensuring rabbitmq is running${COLORNONE}"
        rabbitmq-server -detached >/dev/null 2>&1
    else
        echo -e "${COLORRED}  Warning: rabbitmq-server not available.${COLORNONE}"
        echo -e "${COLORRED}  To install: conda install rabbitmq-server${COLORNONE}"
        return
    fi
    # --------------------------------------------------------------------------

    # --------------------------------------------------------------------------
    # AIIDA DATABASE SETUP

    echo -e "${COLORGREEN}- Setting Up AiiDa Database${COLORNONE}"

    local AIIDAPATH=${outarray[1]}
    local AIIDADBPATH=${outarray[7]}
    local AIIDAPROFILE=${outarray[8]}
    local AIIDAEMAIL=${outarray[9]}
    local AIIDAFNAME=${outarray[10]}
    local AIIDALNAME=${outarray[11]}
    local AIIDAINSTITUTION=${outarray[12]}

    local new_profile=false

    # use correct .aiida path
    echo -e "  AIIDA_PATH='${AIIDAPATH}'"
    export AIIDA_PATH="${AIIDAPATH}"

    # ensure the .aiida dir exists
    mkdir -p "$AIIDAPATH/.aiida"

    # check if profile already exists
    if [[ -z `verdi profile list | grep -w $AIIDAPROFILE` ]]; then
        if [ ${create_missing} == true ] ;then
            verdi quicksetup --non-interactive --profile "$AIIDAPROFILE" --email="$AIIDAEMAIL" --first-name="$AIIDAFNAME" --last-name="$AIIDALNAME" --institution="$AIIDAINSTITUTION" --db-backend="django" --db-port $SQLPORT --db-username="$SQLUSER" --db-password="$SQLUSERPWRD" --db-name="$SQLNAME" --repository="$AIIDADBPATH"
            new_profile=true
        else
            echo -e "${COLORRED}  Profile: $AIIDAPROFILE, was not found (and -c flag not set).$COLORNONE"
            echo "  available profiles:"
            verdi profile list
            return
        fi
    fi
    # --------------------------------------------------------------------------

    # --------------------------------------------------------------------------
    # START AIIDA
    echo -e "${COLORGREEN}- Starting AiiDA${COLORNONE}"

    # ensure plugins are up to date
    echo -e "  Rescanning aiida plugins"
    reentry scan -r aiida

    echo -e "  Setting default profile: $AIIDAPROFILE"
    verdi profile setdefault $AIIDAPROFILE

    # start aiida daemon
    if [[ -z `verdi -p $AIIDAPROFILE daemon status | grep "Daemon is running "` ]]; then
        echo -e "  Activating daemon for profile: $AIIDAPROFILE"
        if [[ ! -z `verdi -p $AIIDAPROFILE daemon start | grep "You are not the daemon user!"` ]]; then
            verdi daemon configureuser 
            verdi -p $AIIDAPROFILE daemon start
        fi
    else
    #    echo -e "${COLORORANGE}Daemon already running for profile: $PROFILE${COLORNONE}"
        echo -e "  Restarting daemon for profile: $AIIDAPROFILE"
        verdi -p $AIIDAPROFILE daemon restart
    fi

    # setup terminal tab completion of verdi sub commands
    # `verdi completioncommand` only for aiida_core < v1.0.0
    echo -e "  Activating verdi tab completion"
    eval "$(_VERDI_COMPLETE=source verdi)"

    # --------------------------------------------------------------------------

    # --------------------------------------------------------------------------
    # IMPORT NODES    
    local IMPORTNODES=${outarray[13]}
    if [ ${import_nodes} == true ] && [ ! -z "$IMPORTNODES" ] ;then
        echo -e "${COLORGREEN}- Importing Nodes:${COLORNONE}"
        local nodearray
        IFS='::' read -ra nodearray <<< "$IMPORTNODES"
        for npath in "${nodearray[@]}"; do
            if [ ! -z "$npath" ] ;then
                echo "  $npath"
                verdi import $npath
            fi
        done
    fi
    # --------------------------------------------------------------------------
}

activate_aiida "$@"
